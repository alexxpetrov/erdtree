// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internal/api/erdtree.proto

package dbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/oleksiip-aiola/erdtree/internal/gen/internal/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ErdtreeStoreName is the fully-qualified name of the ErdtreeStore service.
	ErdtreeStoreName = "erdtree.v1.ErdtreeStore"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ErdtreeStoreGetProcedure is the fully-qualified name of the ErdtreeStore's Get RPC.
	ErdtreeStoreGetProcedure = "/erdtree.v1.ErdtreeStore/Get"
	// ErdtreeStoreSetProcedure is the fully-qualified name of the ErdtreeStore's Set RPC.
	ErdtreeStoreSetProcedure = "/erdtree.v1.ErdtreeStore/Set"
	// ErdtreeStoreDeleteProcedure is the fully-qualified name of the ErdtreeStore's Delete RPC.
	ErdtreeStoreDeleteProcedure = "/erdtree.v1.ErdtreeStore/Delete"
	// ErdtreeStoreReplicationSyncProcedure is the fully-qualified name of the ErdtreeStore's
	// ReplicationSync RPC.
	ErdtreeStoreReplicationSyncProcedure = "/erdtree.v1.ErdtreeStore/ReplicationSync"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	erdtreeStoreServiceDescriptor               = api.File_internal_api_erdtree_proto.Services().ByName("ErdtreeStore")
	erdtreeStoreGetMethodDescriptor             = erdtreeStoreServiceDescriptor.Methods().ByName("Get")
	erdtreeStoreSetMethodDescriptor             = erdtreeStoreServiceDescriptor.Methods().ByName("Set")
	erdtreeStoreDeleteMethodDescriptor          = erdtreeStoreServiceDescriptor.Methods().ByName("Delete")
	erdtreeStoreReplicationSyncMethodDescriptor = erdtreeStoreServiceDescriptor.Methods().ByName("ReplicationSync")
)

// ErdtreeStoreClient is a client for the erdtree.v1.ErdtreeStore service.
type ErdtreeStoreClient interface {
	Get(context.Context, *connect.Request[api.GetRequest]) (*connect.Response[api.GetResponse], error)
	Set(context.Context, *connect.Request[api.SetRequest]) (*connect.Response[api.SetResponse], error)
	Delete(context.Context, *connect.Request[api.DeleteRequest]) (*connect.Response[api.DeleteResponse], error)
	ReplicationSync(context.Context, *connect.Request[api.ReplicationSyncRequest]) (*connect.Response[api.ReplicationSyncResponse], error)
}

// NewErdtreeStoreClient constructs a client for the erdtree.v1.ErdtreeStore service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewErdtreeStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ErdtreeStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &erdtreeStoreClient{
		get: connect.NewClient[api.GetRequest, api.GetResponse](
			httpClient,
			baseURL+ErdtreeStoreGetProcedure,
			connect.WithSchema(erdtreeStoreGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		set: connect.NewClient[api.SetRequest, api.SetResponse](
			httpClient,
			baseURL+ErdtreeStoreSetProcedure,
			connect.WithSchema(erdtreeStoreSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[api.DeleteRequest, api.DeleteResponse](
			httpClient,
			baseURL+ErdtreeStoreDeleteProcedure,
			connect.WithSchema(erdtreeStoreDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		replicationSync: connect.NewClient[api.ReplicationSyncRequest, api.ReplicationSyncResponse](
			httpClient,
			baseURL+ErdtreeStoreReplicationSyncProcedure,
			connect.WithSchema(erdtreeStoreReplicationSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// erdtreeStoreClient implements ErdtreeStoreClient.
type erdtreeStoreClient struct {
	get             *connect.Client[api.GetRequest, api.GetResponse]
	set             *connect.Client[api.SetRequest, api.SetResponse]
	delete          *connect.Client[api.DeleteRequest, api.DeleteResponse]
	replicationSync *connect.Client[api.ReplicationSyncRequest, api.ReplicationSyncResponse]
}

// Get calls erdtree.v1.ErdtreeStore.Get.
func (c *erdtreeStoreClient) Get(ctx context.Context, req *connect.Request[api.GetRequest]) (*connect.Response[api.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Set calls erdtree.v1.ErdtreeStore.Set.
func (c *erdtreeStoreClient) Set(ctx context.Context, req *connect.Request[api.SetRequest]) (*connect.Response[api.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Delete calls erdtree.v1.ErdtreeStore.Delete.
func (c *erdtreeStoreClient) Delete(ctx context.Context, req *connect.Request[api.DeleteRequest]) (*connect.Response[api.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// ReplicationSync calls erdtree.v1.ErdtreeStore.ReplicationSync.
func (c *erdtreeStoreClient) ReplicationSync(ctx context.Context, req *connect.Request[api.ReplicationSyncRequest]) (*connect.Response[api.ReplicationSyncResponse], error) {
	return c.replicationSync.CallUnary(ctx, req)
}

// ErdtreeStoreHandler is an implementation of the erdtree.v1.ErdtreeStore service.
type ErdtreeStoreHandler interface {
	Get(context.Context, *connect.Request[api.GetRequest]) (*connect.Response[api.GetResponse], error)
	Set(context.Context, *connect.Request[api.SetRequest]) (*connect.Response[api.SetResponse], error)
	Delete(context.Context, *connect.Request[api.DeleteRequest]) (*connect.Response[api.DeleteResponse], error)
	ReplicationSync(context.Context, *connect.Request[api.ReplicationSyncRequest]) (*connect.Response[api.ReplicationSyncResponse], error)
}

// NewErdtreeStoreHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewErdtreeStoreHandler(svc ErdtreeStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	erdtreeStoreGetHandler := connect.NewUnaryHandler(
		ErdtreeStoreGetProcedure,
		svc.Get,
		connect.WithSchema(erdtreeStoreGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	erdtreeStoreSetHandler := connect.NewUnaryHandler(
		ErdtreeStoreSetProcedure,
		svc.Set,
		connect.WithSchema(erdtreeStoreSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	erdtreeStoreDeleteHandler := connect.NewUnaryHandler(
		ErdtreeStoreDeleteProcedure,
		svc.Delete,
		connect.WithSchema(erdtreeStoreDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	erdtreeStoreReplicationSyncHandler := connect.NewUnaryHandler(
		ErdtreeStoreReplicationSyncProcedure,
		svc.ReplicationSync,
		connect.WithSchema(erdtreeStoreReplicationSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/erdtree.v1.ErdtreeStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ErdtreeStoreGetProcedure:
			erdtreeStoreGetHandler.ServeHTTP(w, r)
		case ErdtreeStoreSetProcedure:
			erdtreeStoreSetHandler.ServeHTTP(w, r)
		case ErdtreeStoreDeleteProcedure:
			erdtreeStoreDeleteHandler.ServeHTTP(w, r)
		case ErdtreeStoreReplicationSyncProcedure:
			erdtreeStoreReplicationSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedErdtreeStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedErdtreeStoreHandler struct{}

func (UnimplementedErdtreeStoreHandler) Get(context.Context, *connect.Request[api.GetRequest]) (*connect.Response[api.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("erdtree.v1.ErdtreeStore.Get is not implemented"))
}

func (UnimplementedErdtreeStoreHandler) Set(context.Context, *connect.Request[api.SetRequest]) (*connect.Response[api.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("erdtree.v1.ErdtreeStore.Set is not implemented"))
}

func (UnimplementedErdtreeStoreHandler) Delete(context.Context, *connect.Request[api.DeleteRequest]) (*connect.Response[api.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("erdtree.v1.ErdtreeStore.Delete is not implemented"))
}

func (UnimplementedErdtreeStoreHandler) ReplicationSync(context.Context, *connect.Request[api.ReplicationSyncRequest]) (*connect.Response[api.ReplicationSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("erdtree.v1.ErdtreeStore.ReplicationSync is not implemented"))
}
